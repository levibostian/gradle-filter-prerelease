/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package earth.levi

import org.gradle.api.Project
import org.gradle.api.Plugin

open class FilterPrereleaseExtension {
    var allowAlpha = false
    var allowBeta = false
    var allowReleaseCandidate = false
    var allowSnapshot = false
    var customTypesToFilter: List<String> = emptyList() // example: ["-foo", "-bar"]
}

class FilterPrereleasePlugin: Plugin<Project> {
    override fun apply(project: Project) {
        val pluginConfig = project.extensions.create("filterPrerelease", FilterPrereleaseExtension::class.java)

        project.allprojects {
            it.configurations.all {
                it.resolutionStrategy {
                    // Filters dependency versions based on criteria.
                    // Called a Component Selection Rule: https://docs.gradle.org/current/userguide/dynamic_versions.html#sec:component_selection_rules
                    it.componentSelection {
                        it.all {
                            // You can make exclusions if you want by adding conditionals for candidate group, name, version, etc.
                            // version is determiend by the highest version not rejected.

                            if (it.candidate.version.contains("-alpha") && !pluginConfig.allowAlpha) {
                                it.reject("version is an alpha release")
                            }

                            if (it.candidate.version.contains("-beta") && !pluginConfig.allowBeta) {
                                it.reject("version is a beta release")
                            }

                            if (it.candidate.version.contains("-rc") && !pluginConfig.allowReleaseCandidate) {
                                it.reject("version is a release candidate")
                            }

                            if (it.candidate.version.contains("-SNAPSHOT") && !pluginConfig.allowSnapshot) {
                                it.reject("version is a snapshot release")
                            }

                            pluginConfig.customTypesToFilter.forEach { customType ->
                                if (it.candidate.version.contains(customType)) {
                                    it.reject("version is a $customType release")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
